// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: players.sql

package data

import (
	"context"
)

const getPlayer = `-- name: GetPlayer :one
SELECT playerid, username, figurestring, motto, membersince, userdataexists, figureexists, userdatalastrequested, figurelastrequested FROM Players
WHERE PlayerID = ?
`

func (q *Queries) GetPlayer(ctx context.Context, playerid int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, playerid)
	var i Player
	err := row.Scan(
		&i.Playerid,
		&i.Username,
		&i.Figurestring,
		&i.Motto,
		&i.Membersince,
		&i.Userdataexists,
		&i.Figureexists,
		&i.Userdatalastrequested,
		&i.Figurelastrequested,
	)
	return i, err
}

const getPlayerByName = `-- name: GetPlayerByName :one
SELECT playerid, username, figurestring, motto, membersince, userdataexists, figureexists, userdatalastrequested, figurelastrequested FROM Players
WHERE Username = ?
`

func (q *Queries) GetPlayerByName(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByName, username)
	var i Player
	err := row.Scan(
		&i.Playerid,
		&i.Username,
		&i.Figurestring,
		&i.Motto,
		&i.Membersince,
		&i.Userdataexists,
		&i.Figureexists,
		&i.Userdatalastrequested,
		&i.Figurelastrequested,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT playerid, username, figurestring, motto, membersince, userdataexists, figureexists, userdatalastrequested, figurelastrequested FROM Players
ORDER BY PlayerID
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.Playerid,
			&i.Username,
			&i.Figurestring,
			&i.Motto,
			&i.Membersince,
			&i.Userdataexists,
			&i.Figureexists,
			&i.Userdatalastrequested,
			&i.Figurelastrequested,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
